#!/usr/bin/env python3
"""
Apache/Nginx Log Security Analyzer
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå log files ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≤‡∏ü

‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
pip install pandas matplotlib seaborn

Export ‡πÄ‡∏õ‡πá‡∏ô text ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
python log_analyzer.py access.log --export-text report.txt

Export ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
python log_analyzer.py access.log --export-json report.json
"""

import re
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict, Counter
from datetime import datetime
import argparse
import json
from urllib.parse import unquote
import ipaddress

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ matplotlib ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
plt.rcParams['font.family'] = ['DejaVu Sans', 'Tahoma', 'Arial Unicode MS']

class LogSecurityAnalyzer:
    def __init__(self):
        # Attack patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.attack_patterns = {
            'SQL Injection': [
                r'union\s+select', r'insert\s+into', r'delete\s+from', r'drop\s+table',
                r'exec\s*\(', r'script\s*>', r'<\s*script', r'javascript:',
                r'vbscript:', r'onload\s*=', r'onerror\s*=', r'1=1', r'1\'=\'1',
                r'admin\'--', r'or\s+1=1', r'\'\s*or\s*\'', r'0x[0-9a-f]+',
                r'char\(\d+\)', r'waitfor\s+delay', r'benchmark\('
            ],
            'XSS': [
                r'<script[^>]*>', r'</script>', r'javascript:', r'vbscript:',
                r'onload\s*=', r'onerror\s*=', r'onmouseover\s*=', r'onclick\s*=',
                r'onfocus\s*=', r'onblur\s*=', r'alert\s*\(', r'document\.cookie',
                r'<iframe[^>]*>', r'<object[^>]*>', r'<embed[^>]*>'
            ],
            'Directory Traversal': [
                r'\.\./', r'\.\.\\', r'%2e%2e%2f', r'%2e%2e%5c',
                r'..%2f', r'..%5c', r'%252e%252e%252f'
            ],
            'Command Injection': [
                r';\s*cat\s+', r';\s*ls\s+', r';\s*id\s*;', r';\s*pwd\s*;',
                r';\s*whoami', r';\s*uname', r'`cat\s+', r'`ls\s+',
                r'\|\s*cat\s+', r'\|\s*ls\s+', r'&\s*cat\s+', r'&\s*ls\s+'
            ],
            'File Inclusion': [
                r'etc/passwd', r'etc/shadow', r'boot\.ini', r'win\.ini',
                r'php://filter', r'php://input', r'data://', r'file://',
                r'expect://', r'zip://', r'phar://'
            ],
            'Sensitive File Access': [
                r'\.env', r'\.git/', r'config\.php', r'wp-config\.php',
                r'database\.yml', r'\.htaccess', r'\.htpasswd', r'backup\.',
                r'\.sql', r'\.bak', r'\.old', r'\.orig', r'admin\.php',
                r'phpinfo\.php', r'test\.php'
            ],
            'Bot/Scanner': [
                r'nikto', r'nmap', r'sqlmap', r'dirb', r'dirbuster',
                r'gobuster', r'wpscan', r'masscan', r'zap', r'burp',
                r'acunetix', r'nessus', r'openvas', r'w3af'
            ]
        }
        
        # Suspicious user agents
        self.suspicious_agents = [
            'sqlmap', 'nikto', 'nmap', 'masscan', 'zap', 'burp',
            'acunetix', 'nessus', 'openvas', 'w3af', 'dirb', 'gobuster',
            'python-requests', 'curl', 'wget', 'libwww-perl'
        ]
        
        # Log format patterns
        self.log_patterns = {
            'combined': r'(\S+) \S+ \S+ \[(.*?)\] "(\S+) (.*?) HTTP/\S+" (\d+) (\S+) "(.*?)" "(.*?)"',
            'common': r'(\S+) \S+ \S+ \[(.*?)\] "(\S+) (.*?) HTTP/\S+" (\d+) (\S+)'
        }
        
        self.parsed_logs = []
        self.attacks = defaultdict(list)
        self.suspicious_ips = Counter()
        
    def parse_log_line(self, line):
        """Parse single log line"""
        line = line.strip()
        if not line or line.startswith('#'):
            return None
            
        # ‡∏•‡∏≠‡∏á combined format ‡∏Å‡πà‡∏≠‡∏ô
        match = re.match(self.log_patterns['combined'], line)
        if match:
            ip, timestamp, method, url, status, size, referer, user_agent = match.groups()
            return {
                'ip': ip,
                'timestamp': timestamp,
                'method': method,
                'url': unquote(url),
                'status': int(status),
                'size': size if size != '-' else '0',
                'referer': referer,
                'user_agent': user_agent
            }
        
        # ‡∏•‡∏≠‡∏á common format
        match = re.match(self.log_patterns['common'], line)
        if match:
            ip, timestamp, method, url, status, size = match.groups()
            return {
                'ip': ip,
                'timestamp': timestamp,
                'method': method,
                'url': unquote(url),
                'status': int(status),
                'size': size if size != '-' else '0',
                'referer': '-',
                'user_agent': '-'
            }
            
        return None
    
    def is_private_ip(self, ip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô private IP ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            return ipaddress.ip_address(ip).is_private
        except:
            return False
    
    def detect_attacks(self, log_entry):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÉ‡∏ô log entry"""
        url = log_entry['url'].lower()
        user_agent = log_entry['user_agent'].lower()
        referer = log_entry['referer'].lower()
        
        detected_attacks = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL patterns
        for attack_type, patterns in self.attack_patterns.items():
            for pattern in patterns:
                if re.search(pattern, url, re.IGNORECASE):
                    detected_attacks.append(attack_type)
                    break
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User Agent
        for agent in self.suspicious_agents:
            if agent in user_agent:
                detected_attacks.append('Bot/Scanner')
                break
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status codes ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
        if log_entry['status'] in [401, 403]:
            detected_attacks.append('Unauthorized Access')
        elif log_entry['status'] == 404 and any(pattern in url for pattern in ['admin', 'wp-', 'config', '.env']):
            detected_attacks.append('Reconnaissance')
        
        return detected_attacks
    
    def analyze_log_file(self, file_path):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå log"""
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line_num, line in enumerate(f, 1):
                if line_num % 10000 == 0:
                    print(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß {line_num:,} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î...")
                
                parsed = self.parse_log_line(line)
                if not parsed:
                    continue
                
                self.parsed_logs.append(parsed)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
                attacks = self.detect_attacks(parsed)
                if attacks:
                    for attack_type in attacks:
                        self.attacks[attack_type].append({
                            'ip': parsed['ip'],
                            'timestamp': parsed['timestamp'],
                            'url': parsed['url'],
                            'status': parsed['status'],
                            'user_agent': parsed['user_agent']
                        })
                    
                    # ‡∏ô‡∏±‡∏ö IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
                    self.suspicious_ips[parsed['ip']] += len(attacks)
        
        print(f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {len(self.parsed_logs):,} entries")
    
    def generate_report(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ"""
        print("\n" + "="*80)
        print("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        print("="*80)
        
        if not self.attacks:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢")
            return
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        print("\nüö® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
        total_attacks = 0
        for attack_type, incidents in self.attacks.items():
            count = len(incidents)
            total_attacks += count
            print(f"   {attack_type}: {count:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        print(f"\nüìà ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_attacks:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        # IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        print(f"\nüîç IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 10):")
        for ip, count in self.suspicious_ips.most_common(10):
            is_private = "üè†" if self.is_private_ip(ip) else "üåê"
            print(f"   {is_private} {ip}: {count} ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ")
        
        # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        print(f"\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ:")
        for attack_type, incidents in self.attacks.items():
            print(f"\n--- {attack_type} ({len(incidents)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á) ---")
            
            # ‡πÅ‡∏™‡∏î‡∏á 5 cases ‡πÅ‡∏£‡∏Å
            for i, incident in enumerate(incidents[:5]):
                print(f"  {i+1}. IP: {incident['ip']}")
                print(f"     URL: {incident['url'][:100]}...")
                print(f"     Status: {incident['status']}")
                print(f"     Time: {incident['timestamp']}")
                if incident['user_agent'] != '-':
                    print(f"     User-Agent: {incident['user_agent'][:50]}...")
                print()
            
            if len(incidents) > 5:
                print(f"     ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(incidents) - 5} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    def create_visualizations(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        if not self.attacks:
            print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ style
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Log Security', fontsize=16, fontweight='bold')
        
        # 1. ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
        attack_counts = {k: len(v) for k, v in self.attacks.items()}
        attacks_df = pd.DataFrame(list(attack_counts.items()), columns=['Attack Type', 'Count'])
        
        ax1 = axes[0, 0]
        bars = ax1.bar(range(len(attacks_df)), attacks_df['Count'], color='red', alpha=0.7)
        ax1.set_title('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', fontweight='bold')
        ax1.set_xlabel('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ')
        ax1.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
        ax1.set_xticks(range(len(attacks_df)))
        ax1.set_xticklabels(attacks_df['Attack Type'], rotation=45, ha='right')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á
        for bar, count in zip(bars, attacks_df['Count']):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                    str(count), ha='center', va='bottom', fontweight='bold')
        
        # 2. Top 10 IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
        ax2 = axes[0, 1]
        top_ips = dict(self.suspicious_ips.most_common(10))
        if top_ips:
            ips = list(top_ips.keys())
            counts = list(top_ips.values())
            
            bars = ax2.barh(range(len(ips)), counts, color='orange', alpha=0.7)
            ax2.set_title('Top 10 IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢', fontweight='bold')
            ax2.set_xlabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ')
            ax2.set_ylabel('IP Address')
            ax2.set_yticks(range(len(ips)))
            ax2.set_yticklabels([f"{ip}" for ip in ips])
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á
            for bar, count in zip(bars, counts):
                ax2.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2,
                        str(count), ha='left', va='center', fontweight='bold')
        
        # 3. Status Codes Distribution
        ax3 = axes[1, 0]
        all_status = []
        for incidents in self.attacks.values():
            all_status.extend([inc['status'] for inc in incidents])
        
        if all_status:
            status_counts = Counter(all_status)
            status_df = pd.DataFrame(list(status_counts.items()), columns=['Status Code', 'Count'])
            
            wedges, texts, autotexts = ax3.pie(status_df['Count'], labels=status_df['Status Code'],
                                              autopct='%1.1f%%', startangle=90)
            ax3.set_title('Status Codes ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ', fontweight='bold')
        
        # 4. Timeline ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤)
        ax4 = axes[1, 1]
        try:
            # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤
            timestamps = []
            for incidents in self.attacks.values():
                for inc in incidents:
                    try:
                        # ‡πÅ‡∏õ‡∏•‡∏á timestamp (format: 01/Jan/2024:12:00:00 +0700)
                        time_str = inc['timestamp'].split()[0]
                        dt = datetime.strptime(time_str, '%d/%b/%Y:%H:%M:%S')
                        timestamps.append(dt)
                    except:
                        continue
            
            if timestamps:
                # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                hourly_attacks = Counter([dt.hour for dt in timestamps])
                hours = list(range(24))
                counts = [hourly_attacks.get(h, 0) for h in hours]
                
                ax4.plot(hours, counts, marker='o', linewidth=2, markersize=4, color='red')
                ax4.fill_between(hours, counts, alpha=0.3, color='red')
                ax4.set_title('‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', fontweight='bold')
                ax4.set_xlabel('‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á')
                ax4.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ')
                ax4.set_xticks(range(0, 24, 2))
                ax4.grid(True, alpha=0.3)
            else:
                ax4.text(0.5, 0.5, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ', 
                        ha='center', va='center', transform=ax4.transAxes)
                ax4.set_title('Timeline ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ', fontweight='bold')
        except Exception as e:
            ax4.text(0.5, 0.5, f'Error: {str(e)}', 
                    ha='center', va='center', transform=ax4.transAxes)
            ax4.set_title('Timeline ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ', fontweight='bold')
        
        plt.tight_layout()
        plt.savefig('security_analysis_report.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡πâ‡∏ß: security_analysis_report.png")
    
    def export_to_json(self, filename='security_report.json'):
        """Export ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON"""
        report = {
            'summary': {
                'total_logs': len(self.parsed_logs),
                'total_attacks': sum(len(incidents) for incidents in self.attacks.values()),
                'attack_types': {k: len(v) for k, v in self.attacks.items()},
                'top_suspicious_ips': dict(self.suspicious_ips.most_common(20))
            },
            'detailed_attacks': {}
        }
        
        for attack_type, incidents in self.attacks.items():
            report['detailed_attacks'][attack_type] = incidents
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {filename}")
    
    def export_to_text(self, filename='security_report.txt'):
        """Export ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Text file"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ Log Files\n")
            f.write("="*80 + "\n")
            f.write(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Log Entries ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(self.parsed_logs):,}\n\n")
            
            if not self.attacks:
                f.write("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢\n")
                return
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            f.write("üö® ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n")
            f.write("-" * 50 + "\n")
            total_attacks = 0
            for attack_type, incidents in sorted(self.attacks.items(), key=lambda x: len(x[1]), reverse=True):
                count = len(incidents)
                total_attacks += count
                f.write(f"   {attack_type:.<30} {count:>8,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n")
            
            f.write("-" * 50 + "\n")
            f.write(f"   {'‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':.<30} {total_attacks:>8,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n")
            
            # IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            f.write("üîç TOP 20 IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n")
            f.write("-" * 60 + "\n")
            f.write(f"{'‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö':<8} {'IP Address':<18} {'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ':<15} {'‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}\n")
            f.write("-" * 60 + "\n")
            
            for rank, (ip, count) in enumerate(self.suspicious_ips.most_common(20), 1):
                ip_type = "Private" if self.is_private_ip(ip) else "Public"
                f.write(f"{rank:<8} {ip:<18} {count:<15} {ip_type}\n")
            
            f.write("\n")
            
            # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            f.write("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:\n")
            f.write("="*80 + "\n")
            
            for attack_type, incidents in self.attacks.items():
                f.write(f"\n--- {attack_type.upper()} ({len(incidents):,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á) ---\n")
                f.write("-" * 50 + "\n")
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° IP
                ip_groups = defaultdict(list)
                for incident in incidents:
                    ip_groups[incident['ip']].append(incident)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° IP (top 10 IPs)
                sorted_ips = sorted(ip_groups.items(), key=lambda x: len(x[1]), reverse=True)
                
                for i, (ip, ip_incidents) in enumerate(sorted_ips[:10], 1):
                    ip_type = "üè†" if self.is_private_ip(ip) else "üåê"
                    f.write(f"\n{i}. IP: {ip} {ip_type} ({len(ip_incidents)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)\n")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URLs (top 5)
                    unique_urls = list(set([inc['url'] for inc in ip_incidents]))
                    f.write(f"   URLs ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏à‡∏°‡∏ï‡∏µ:\n")
                    for j, url in enumerate(unique_urls[:5], 1):
                        if len(url) > 100:
                            url = url[:97] + "..."
                        f.write(f"     {j}. {url}\n")
                    
                    if len(unique_urls) > 5:
                        f.write(f"     ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(unique_urls) - 5} URLs\n")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á User Agents ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                    unique_agents = list(set([inc['user_agent'] for inc in ip_incidents if inc['user_agent'] != '-']))
                    if unique_agents:
                        f.write(f"   User Agents:\n")
                        for j, agent in enumerate(unique_agents[:3], 1):
                            if len(agent) > 80:
                                agent = agent[:77] + "..."
                            f.write(f"     {j}. {agent}\n")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                    timestamps = [inc['timestamp'] for inc in ip_incidents]
                    if timestamps:
                        f.write(f"   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {timestamps[0]} ‡∏ñ‡∏∂‡∏á {timestamps[-1]}\n")
                
                if len(sorted_ips) > 10:
                    f.write(f"\n   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(sorted_ips) - 10} IPs\n")
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            f.write("\n" + "="*80 + "\n")
            f.write("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n")
            f.write("="*80 + "\n")
            
            # Status Codes
            all_status = []
            for incidents in self.attacks.values():
                all_status.extend([inc['status'] for inc in incidents])
            
            if all_status:
                status_counts = Counter(all_status)
                f.write("\nüî¢ Status Codes ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ:\n")
                for status, count in sorted(status_counts.items()):
                    percentage = (count / len(all_status)) * 100
                    f.write(f"   {status}: {count:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ({percentage:.1f}%)\n")
            
            # Methods
            all_methods = []
            for incidents in self.attacks.values():
                all_methods.extend([inc.get('method', 'GET') for inc in incidents])
            
            if all_methods:
                method_counts = Counter(all_methods)
                f.write("\nüîß HTTP Methods ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ:\n")
                for method, count in sorted(method_counts.items(), key=lambda x: x[1], reverse=True):
                    percentage = (count / len(all_methods)) * 100
                    f.write(f"   {method}: {count:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ({percentage:.1f}%)\n")
            
            # Timeline analysis
            try:
                timestamps = []
                for incidents in self.attacks.values():
                    for inc in incidents:
                        try:
                            time_str = inc['timestamp'].split()[0]
                            dt = datetime.strptime(time_str, '%d/%b/%Y:%H:%M:%S')
                            timestamps.append(dt)
                        except:
                            continue
                
                if timestamps:
                    f.write("\n‚è∞ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤:\n")
                    hourly_attacks = Counter([dt.hour for dt in timestamps])
                    f.write("   ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 5):\n")
                    for hour, count in hourly_attacks.most_common(5):
                        f.write(f"     {hour:02d}:00-{hour:02d}:59 -> {count:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n")
                    
                    # ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
                    daily_attacks = Counter([dt.strftime('%A') for dt in timestamps])
                    f.write("   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n")
                    for day, count in daily_attacks.most_common():
                        f.write(f"     {day}: {count:,} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n")
            except:
                pass
            
            f.write("\n" + "="*80 + "\n")
            f.write("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:\n")
            f.write("- üåê = Public IP, üè† = Private IP\n")
            f.write("- ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢\n")
            f.write("- ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ\n")
            f.write("="*80 + "\n")
        
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Text ‡πÅ‡∏•‡πâ‡∏ß: {filename}")

def main():
    parser = argparse.ArgumentParser(description='Apache/Nginx Log Security Analyzer')
    parser.add_argument('logfile', help='Path to log file')
    parser.add_argument('--no-graph', action='store_true', help='‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü')
    parser.add_argument('--export-json', help='Export to JSON file')
    parser.add_argument('--export-text', help='Export to Text file')
    parser.add_argument('--export-all', action='store_true', help='Export ‡∏ó‡∏±‡πâ‡∏á JSON ‡πÅ‡∏•‡∏∞ Text')
    
    args = parser.parse_args()
    
    analyzer = LogSecurityAnalyzer()
    
    try:
        analyzer.analyze_log_file(args.logfile)
        analyzer.generate_report()
        
        if not args.no_graph:
            analyzer.create_visualizations()
        
        if args.export_json:
            analyzer.export_to_json(args.export_json)
        
        if args.export_text:
            analyzer.export_to_text(args.export_text)
        
        if args.export_all:
            analyzer.export_to_json('security_report.json')
            analyzer.export_to_text('security_report.txt')
    
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {args.logfile}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()
